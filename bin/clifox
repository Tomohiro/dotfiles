#!/usr/bin/env ruby

module MozRepl
  module Telnet
    require 'net/telnet'
    class Net::Telnet
      def method_missing(m, *args, &block)
        @sock.__send__(m, *args, &block)
      end
    end

    def self.open(host = nil, port = nil)
      @host = host || 'localhost'
      @port = port || 4242
      @telnet = Net::Telnet.new({'Host' => @host, 'Port' => @port })
    end

    def self.close
      @telnet.close
    end

    def self.cmd(js)
      @telnet.cmd(js)
    end
  end

  module JS
    def self.reload_current_tab
      js = <<-JS
      x = content.window.pageXOffset;
      y = content.window.pageYOffset;
      BrowserReload();
      content.window.scrollTo(x, y);
      JS
      Telnet.cmd(js)
    end

    def self.reload_target_tab(query)
      js = <<-JS
      var num = gBrowser.browsers.length;
      for (var i = 0; i < num; i++) {
          var buf = gBrowser.getBrowserAtIndex(i);
          try {
              if (buf.currentURI.spec.match(/#{query}/) || buf.contentTitle.match(/#{query}/)) {
                  buf.reload();
              }
          } catch(e) {
              Components.utils.reportError(e);
          }
      }
      JS
      Telnet.cmd(js)
    end

    def self.screenshot
      js = <<-JS
      var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
      canvas.height = content.document.height;
      canvas.width = content.document.width;
      var ctx = canvas.getContext('2d');
      ctx.drawWindow(content, 0, 0, content.document.width, content.document.height, 'rgb(0, 0, 0)');
      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
      var path = '~/Desktop/';
      var title = content.document.title;
      var extension = '.png';
      file.initWithPath(path + title + extension);
      var io = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
      var source = io.newURI(canvas.toDataURL('image/png', ''), 'UTF8', null);
      var target = io.newFileURI(file)
      var persist = Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"].createInstance(Components.interfaces.nsIWebBrowserPersist);
      persist.persistFlags = Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;
      persist.persistFlags |= Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;
      persist.saveURI(source, null, null, null, null, file);
      JS
      Telnet.cmd(js)
    end

    def self.open(uri)
      Telnet.cmd("gBrowser.selectedTab = gBrowser.addTab('#{uri}')")
    end
  end
end


Version = '0.0.0'
class CLIFox
  require 'optparse'
  include MozRepl

  def initialize
    @host = nil
    @port = nil
  end

  def self.run
    new.main
  end

  def main
    begin
      opts = {}
      ARGV.options do |o|
        o.on('-h', '--host [host]') { |v| @host = v }
        o.on('-p', '--port [port]') { |v| @port = v }
        o.on('-r', '--reload [page title or uri]') { |v| repl_eval { reload(v) } }
        o.on('-o', '--open URI') { |v| repl_eval { JS.open(v) } }
        o.on('-s', '--screenshot') { |v| repl_eval { JS.screenshot } }
        o.parse!
      end
    rescue => e
      puts e.inspect
      exit 1
    end
  end

  def repl_eval
    repl = Telnet.open(@host, @port)
    yield
    repl.close
  end

  def reload(query = nil)
    if query
      JS.reload_target_tab(query)
    else
      JS.reload_current_tab
    end
  end
end

if __FILE__ == $0
  CLIFox.run
end
